name: "SAST"

on:
  push:
    branches: [ "main" ]

jobs:
  # snyk:
  #   permissions: write-all
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Build a Docker image
  #     run: docker build -t your/image-to-test .
  #   - name: Run Snyk to check Docker image for vulnerabilities
  #     # Snyk can be used to break the build when it detects vulnerabilities.
  #     # In this case we want to upload the issues to GitHub Code Scanning
  #     continue-on-error: true
  #     uses: snyk/actions/docker@master
  #     env:
  #       # In order to use the Snyk Action you will need to have a Snyk API token.
  #       # More details in https://github.com/snyk/actions#getting-your-snyk-token
  #       # or you can signup for free at https://snyk.io/login
  #       SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  #     with:
  #       image: your/image-to-test
  #       args: --file=Dockerfile --sarif-file-output=snyk.sarif
  #   - name: Replace security-severity undefined for license-related findings 
  #     run: |
  #       sed -i 's/"security-severity": "null"/"security-severity": "0"/g' snyk.sarif
  #   - name: Upload result to GitHub Code Scanning
  #     uses: github/codeql-action/upload-sarif@v3
  #     with:
  #       sarif_file: snyk.sarif

  # safety-check:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.9'

  #     - name: Install Safety
  #       run: pip install safety

  #     - name: Run Safety Scan with HTML Report
  #       env:
  #         SAFETY_API_KEY: ${{ secrets.SAFETY_API_KEY }}
  #       run: safety scan --key $SAFETY_API_KEY --output html --save-html safety-report.html

  #     - name: Archive Safety HTML Report
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: safety-html-report
  #         path: safety-report.html

  # safety-check:
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v3

  #   - name: Set up Python
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: '3.9'

  #   - name: Install Safety
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install safety

  #   - name: Run Safety Check
  #     run: safety check -r requirements.txt --full-report

  #   - name: Archive Safety Report
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: safety-report
  #       path: safety-report.txt
  #     if: always()

  safety:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Safety CLI to check for vulnerabilities
        uses: pyupio/safety-action@v1
        with:
          api-key: ${{ secrets.SAFETY_API_KEY }}
          output-format: html
          args: --detailed-output --save-as html results.html
      - name: Archive Vulnerability Report
        uses: actions/upload-artifact@v3
        with:
          name: safety-report
          path: results.html
      # - name: Archive Vulnerability Report
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: safety-report
      #     path: safety.html

  # dependency-check:
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v3

  #   - name: Set up JDK 11
  #     uses: actions/setup-java@v3
  #     with:
  #       java-version: '11'
  #       distribution: 'adopt'

  #   - name: Download Dependency-Check
  #     run: |
  #       wget https://github.com/jeremylong/DependencyCheck/releases/download/v9.1.0/dependency-check-9.1.0-release.zip
  #       unzip dependency-check-9.1.0-release.zip

  #   - name: Run Dependency-Check
  #     run: |
  #       ./dependency-check/bin/dependency-check.sh --project "MyProject" --scan ./requirements.txt --out . --enableExperimental --format HTML --format JSON

  #   - name: Archive Vulnerability Report
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: vulnerability-report
  #       path: |
  #         dependency-check-report.html
  #         dependency-check-report.json

  # CodeQL:
  #   runs-on: 'ubuntu-latest'
  #   permissions:
  #     security-events: write
  #     actions: read
  #     contents: read

  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v4

  #   - name: Initialize CodeQL
  #     uses: github/codeql-action/init@v3
  #     with:
  #       languages: 'python'

  #   - name: Autobuild
  #     uses: github/codeql-action/autobuild@v3

  #   - name: Perform CodeQL Analysis
  #     uses: github/codeql-action/analyze@v3

  # SonarCloud:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
  #     - name: SonarCloud Scan
  #       uses: SonarSource/sonarcloud-github-action@master
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Semgrep:
  #   permissions: write-all
  #   runs-on: ubuntu-latest

  #   container:
  #     image: returntocorp/semgrep

  #   if: (github.actor != 'dependabot[bot]')

  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: semgrep ci --sarif --output=semgrep.sarif
  #       env:
  #         SEMGREP_RULES: p/python
  #       continue-on-error: true
  #     - name: Upload SARIF file for GitHub Advanced Security Dashboard
  #       uses: github/codeql-action/upload-sarif@v2
  #       with:
  #         sarif_file: semgrep.sarif

  # Trivy:
  #   permissions: write-all
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Log in to GitHub container registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Lowercase the repo name
  #       run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}
      
  #     # - name: Build and push container image to registry
  #     #   id: build-image
  #     #   uses: docker/build-push-action@v2
  #     #   with:
  #     #     context: .
  #     #     push: true
  #     #     tags: ghcr.io/${{ env.REPO }}:${{ github.sha }}
  #     #     file: ./docker-compose.yaml
  #     #     load: true # Required for docker-compose

  #     - name: Build and push Docker images
  #       env:
  #         IMAGE_TAG: ${{ github.sha }}
  #       run: |
  #         docker-compose -f ./docker-compose.yaml build
  #         docker-compose -f ./docker-compose.yaml push

  #     - name: Run Trivy vulnerability scanner
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: 'ghcr.io/${{ env.REPO }}:${{ github.sha }}'
  #         format: 'sarif'
  #         output: 'trivy-results.sarif'

  #     - name: Upload Trivy scan results to GitHub Security tab
  #       uses: github/codeql-action/upload-sarif@v2
  #       if: always()
  #       with:
  #         sarif_file: 'trivy-results.sarif'

  # # Snyk:
  # #   permissions: write-all
  # #   runs-on: ubuntu-latest
  # #   steps:
  # #     - uses: actions/checkout@master
  # #     - name: Run Snyk to check for vulnerabilities
  # #       uses: snyk/actions/python@master
  # #       continue-on-error: true # To make sure that SARIF upload gets called
  # #       env:
  # #         SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  # #       with:
  # #         args: --sarif-file-output=snyk.sarif
  # #     - name: Upload result to GitHub Code Scanning
  # #       uses: github/codeql-action/upload-sarif@v3
  # #       with:
  # #         sarif_file: snyk.sarif

  # Gitleaks:
  #   permissions: write-all
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #     - uses: gitleaks/gitleaks-action@v2
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
